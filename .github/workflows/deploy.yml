name: Deploy Hamlet Backend and Frontend

on:
  workflow_dispatch:
  push:
    branches:
      - main

concurrency:
  group: hamlet-deploy-${{ github.ref }}
  cancel-in-progress: true

env:
  BACKEND_DIR: backend
  FRONTEND_DIR: frontend-aigoodstudeio

jobs:
  backend_deploy:
    name: Trigger Render Backend Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Trigger Render deployment
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
        run: |
          if [ -z "$RENDER_API_KEY" ] || [ -z "$RENDER_SERVICE_ID" ]; then
            echo "RENDER_API_KEY and RENDER_SERVICE_ID are required" >&2
            exit 1
          fi
          curl -fsS -X POST \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Content-Type: application/json" \
            https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys \
            -d '{"clearCache": true}'

  frontend_deploy:
    name: Deploy Frontend to Vercel
    runs-on: ubuntu-latest
    needs: backend_deploy
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Deploy with Vercel CLI
        working-directory: ${{ env.FRONTEND_DIR }}
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          if [ -z "$VERCEL_TOKEN" ] || [ -z "$VERCEL_ORG_ID" ] || [ -z "$VERCEL_PROJECT_ID" ]; then
            echo "VERCEL_TOKEN, VERCEL_ORG_ID, and VERCEL_PROJECT_ID are required" >&2
            exit 1
          fi
          npx vercel@latest --version
          npx vercel@latest --prod --yes --token "$VERCEL_TOKEN"

  release:
    name: Tag + Changelog Release
    runs-on: windows-latest
    if: github.event_name == 'workflow_dispatch'
    needs: [backend_deploy, frontend_deploy]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Git user
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
        shell: pwsh

      - name: Run release automation
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          ./scripts/release.ps1
        shell: pwsh
